{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/city-insert.component.html","./src/app/city-list.component.html","./src/app/designation-insert.component.html","./src/app/designation-list.component.html","./src/app/dinings-insert.component.html","./src/app/dinings-list.component.html","./src/app/employee-insert.component.html","./src/app/employee-list.component.html","./src/app/location-insert.component.html","./src/app/location-list.component.html","./src/app/menu-insert.component.html","./src/app/menu-list.component.html","./src/app/order-insert.component.html","./src/app/order-list.component.html","./src/app/permission-insert.component.html","./src/app/permission-list.component.html","./src/app/restaurant-insert.component.html","./src/app/restaurant-list.component.html","./src/app/role-insert.component.html","./src/app/role-list.component.html","./src/app/shift-insert.component.html","./src/app/shift-list.component.html","./src/app/state-insert.component.html","./src/app/state-list.component.html","./src/app/user-insert.component.html","./src/app/user-list.component.html","./node_modules/tslib/tslib.es6.js","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/city-insert.component.ts","./src/app/city-list.component.ts","./src/app/designation-insert.component.ts","./src/app/designation-list.component.ts","./src/app/dinings-insert.component.ts","./src/app/dinings-list.component.ts","./src/app/employee-insert.component.ts","./src/app/employee-list.component.ts","./src/app/location-insert.component.ts","./src/app/location-list.component.ts","./src/app/menu-insert.component.ts","./src/app/menu-list.component.ts","./src/app/order-insert.component.ts","./src/app/order-list.component.ts","./src/app/permission-insert.component.ts","./src/app/permission-list.component.ts","./src/app/restaurant-insert.component.ts","./src/app/restaurant-list.component.ts","./src/app/role-insert.component.ts","./src/app/role-list.component.ts","./src/app/shift-insert.component.ts","./src/app/shift-list.component.ts","./src/app/state-insert.component.ts","./src/app/state-list.component.ts","./src/app/user-insert.component.ts","./src/app/user-list.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAe,w+D;;;;;;;;;;;;ACAf;AAAe,6TAA8P,cAAc,+TAA+T,mBAAmB,8cAA8c,MAAM,MAAM,gF;;;;;;;;;;;;ACAvkC;AAAe,qgBAAsc,MAAM,+BAA+B,OAAO,+BAA+B,SAAS,+BAA+B,QAAQ,+G;;;;;;;;;;;;ACAhlB;AAAe,w0BAAywB,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAhzB;AAAe,wfAAyb,WAAW,+BAA+B,aAAa,+G;;;;;;;;;;;;ACA/f;AAAe,k0BAAmwB,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACA1yB;AAAe,ifAAkb,OAAO,+BAA+B,YAAY,mI;;;;;;;;;;;;ACAnf;AAAe,k5DAAm1D,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACA13D;AAAe,utBAAwpB,OAAO,+BAA+B,UAAU,+BAA+B,SAAS,+BAA+B,SAAS,+BAA+B,QAAQ,+BAA+B,WAAW,+BAA+B,OAAO,mI;;;;;;;;;;;;ACA95B;AAAe,whCAAy9B,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAhgC;AAAe,khBAAmd,SAAS,+BAA+B,WAAW,+BAA+B,OAAO,+G;;;;;;;;;;;;ACA3jB;AAAe,0xCAA2tC,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAlwC;AAAe,ijBAAkf,UAAU,+BAA+B,SAAS,+BAA+B,aAAa,+BAA+B,aAAa,uJ;;;;;;;;;;;;ACA3oB;AAAe,wxCAAytC,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAhwC;AAAe,2kBAA4gB,WAAW,+BAA+B,WAAW,+BAA+B,UAAU,+BAA+B,UAAU,sJ;;;;;;;;;;;;ACAlqB;AAAe,ioCAAkkC,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAzmC;AAAe,ijBAAkf,gBAAgB,+BAA+B,kBAAkB,+BAA+B,yBAAyB,mI;;;;;;;;;;;;ACA1nB;AAAe,6vCAA8rC,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAruC;AAAe,2lBAA4hB,OAAO,+BAA+B,QAAQ,+BAA+B,SAAS,+BAA+B,SAAS,mI;;;;;;;;;;;;ACAzqB;AAAe,+iCAAg/B,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAvhC;AAAe,+hBAAge,UAAU,+BAA+B,YAAY,+BAA+B,WAAW,mI;;;;;;;;;;;;ACA9kB;AAAe,giCAAi+B,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAxgC;AAAe,+hBAAge,OAAO,+BAA+B,SAAS,+BAA+B,QAAQ,mI;;;;;;;;;;;;ACArkB;AAAe,0yBAA2uB,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAlxB;AAAe,ySAA0O,MAAM,2BAA2B,QAAQ,2BAA2B,UAAU,uC;;;;;;;;;;;;ACAvU;AAAe,0nHAA2jH,MAAM,MAAM,MAAM,MAAM,4G;;;;;;;;;;;;ACAlmH;AAAe,+7BAAg4B,MAAM,+BAA+B,YAAY,+BAA+B,WAAW,gCAAgC,YAAY,+BAA+B,eAAe,+BAA+B,aAAa,gCAAgC,YAAY,gCAAgC,YAAY,+BAA+B,YAAY,gCAAgC,WAAW,+BAA+B,SAAS,uCAAuC,OAAO,gCAAgC,YAAY,+BAA+B,QAAQ,+BAA+B,UAAU,mI;;;;;;;;;;;;ACAh/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;;AAEO;AACP;AACA,mBAAmB,sBAAsB;AACzC;AACA;;AAEO;AACP;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;;AAEO;AACP,mCAAmC,oCAAoC;AACvE;;AAEO;AACP;AACA;;AAEO;AACP;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;;AAEO;AACP,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;;AAEO;AACP,4BAA4B,sBAAsB;AAClD;AACA;AACA;;AAEO;AACP,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,iBAAiB,sFAAsF,aAAa,EAAE;AACtH,sBAAsB,gCAAgC,qCAAqC,0CAA0C,EAAE,EAAE,GAAG;AAC5I,2BAA2B,MAAM,eAAe,EAAE,YAAY,oBAAoB,EAAE;AACpF,sBAAsB,oGAAoG;AAC1H,6BAA6B,uBAAuB;AACpD,4BAA4B,wBAAwB;AACpD,2BAA2B,yDAAyD;AACpF;;AAEO;AACP;AACA,iBAAiB,4CAA4C,SAAS,EAAE,qDAAqD,aAAa,EAAE;AAC5I,yBAAyB,6BAA6B,oBAAoB,gDAAgD,gBAAgB,EAAE,KAAK;AACjJ;;AAEO;AACP;AACA;AACA,2GAA2G,sFAAsF,aAAa,EAAE;AAChN,sBAAsB,8BAA8B,gDAAgD,uDAAuD,EAAE,EAAE,GAAG;AAClK,4CAA4C,sCAAsC,UAAU,oBAAoB,EAAE,EAAE,UAAU;AAC9H;;AAEO;AACP,gCAAgC,uCAAuC,aAAa,EAAE,EAAE,OAAO,kBAAkB;AACjH;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,4CAA4C;AAC5C;;;;;;;;;;;;;;;;;;ACnMkD;AAQlD,IAAa,YAAY,GAAzB,MAAa,YAAY;CAExB;AAFY,YAAY;IALxB,+DAAS,CAAC;QACP,QAAQ,EAAE,UAAU;QACpB,yMAAiC;KACpC,CAAC;GAEW,YAAY,CAExB;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRgB;AACiB;AACX;AACF;AACW;AACI;AACI;AACN;AACC;AACS;AACI;AACV;AACI;AACP;AACI;AACO;AACJ;AAEJ;AACI;AACZ;AACI;AACF;AACI;AACJ;AACI;AAEM;AACI;AAChB;AACI;AACJ;AACI;AAe1D,IAAa,SAAS,GAAtB,MAAa,SAAS;CAAI;AAAb,SAAS;IAXrB,8DAAQ,CAAC;QACN,OAAO,EAAE,CAAC,uEAAa,EAAC,qEAAgB,EAAC,0DAAW,CAAC;QACrD,YAAY,EAAE,CAAC,2DAAY,EAAC,wEAAkB,EAAC,4EAAoB,EAAC,0EAAmB,EAAC,sEAAiB,EAAC,qFAAwB,EAAC,yFAA0B;YACzJ,mFAAuB,EAAC,+EAAqB,EAAC,gFAAqB,EAAC,4EAAmB;YACvF,mFAAuB,EAAC,uFAAyB,EAAC,mFAAuB,EAAC,+EAAqB;YAC/F,2EAAmB,EAAC,uEAAiB,EAAC,6EAAoB,EAAC,yEAAkB,EAAC,6EAAoB;YAClG,yEAAkB,EAAC,uFAAyB,EAAC,mFAAuB,EAAC,2EAAmB,EAAC,uEAAiB;YAC1G,uEAAiB,EAAC,2EAAmB;SACxC;QACD,SAAS,EAAE,CAAC,2DAAY,CAAC;KAC5B,CAAC;GACW,SAAS,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;AC/C4B;AACA;AAOlD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAI5B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAHjC,SAAI,GAAG,EAAE,CAAC;QACV,WAAM,GAAG,EAAE,CAAC;QACZ,cAAS,GAAG,EAAE,CAAC;QAEX,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACtE,IAAI,CAAC,MAAM,GAAU,IAAI,CAAC;YAC9B;iDACqC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;;YAP0B,+DAAU;;AAJxB,mBAAmB;IAL/B,+DAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,yNAAyC;KAC5C,CAAC;GAEW,mBAAmB,CAW/B;AAX+B;;;;;;;;;;;;;;;;;;;ACRkB;AACA;AAOlD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAG1B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,SAAI,GAAG,EAAE,CAAC;QAGN,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACnE,IAAI,CAAC,IAAI,GAAU,IAAI,CAAC;QAC5B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,iBAAiB;IAL7B,+DAAS,CAAC;QACP,QAAQ,EAAE,WAAW;QACrB,qNAAuC;KAC1C,CAAC;GAEW,iBAAiB,CAQ7B;AAR6B;;;;;;;;;;;;;;;;;;ACPoB;AAOlD,IAAa,0BAA0B,GAAvC,MAAa,0BAA0B;IALvC;QAMI,gBAAW,GAAG,EAAE,CAAC;IAGrB,CAAC;CAAA;AAJY,0BAA0B;IALtC,+DAAS,CAAC;QACP,QAAQ,EAAE,oBAAoB;QAC9B,uOAAgD;KACnD,CAAC;GAEW,0BAA0B,CAItC;AAJsC;;;;;;;;;;;;;;;;;;;ACRW;AACA;AAOlD,IAAa,wBAAwB,GAArC,MAAa,wBAAwB;IAGjC,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,gBAAW,GAAG,EAAE,CAAC;QAGb,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YAC7E,IAAI,CAAC,WAAW,GAAU,IAAI,CAAC;QACnC,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,wBAAwB;IALpC,+DAAS,CAAC;QACP,QAAQ,EAAE,kBAAkB;QAC5B,mOAA8C;KACjD,CAAC;GAEW,wBAAwB,CAQpC;AARoC;;;;;;;;;;;;;;;;;;ACPa;AAOlD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IALlC;QAMI,WAAM,GAAG,EAAE,CAAC;IAGhB,CAAC;CAAA;AAJY,qBAAqB;IALjC,+DAAS,CAAC;QACP,QAAQ,EAAE,eAAe;QACzB,+NAA4C;KAC/C,CAAC;GAEW,qBAAqB,CAIjC;AAJiC;;;;;;;;;;;;;;;;;;;ACRgB;AACA;AAOlD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAG5B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,WAAM,GAAG,EAAE,CAAC;QAGR,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACxE,IAAI,CAAC,MAAM,GAAU,IAAI,CAAC;QAC9B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,mBAAmB;IAL/B,+DAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,2NAA0C;KAC7C,CAAC;GAEW,mBAAmB,CAQ/B;AAR+B;;;;;;;;;;;;;;;;;;ACPkB;AAOlD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IALpC;QAMI,aAAQ,GAAG,EAAE,CAAC;IAGlB,CAAC;CAAA;AAJY,uBAAuB;IALnC,+DAAS,CAAC;QACP,QAAQ,EAAE,iBAAiB;QAC3B,iOAA6C;KAChD,CAAC;GAEW,uBAAuB,CAInC;AAJmC;;;;;;;;;;;;;;;;;;;ACRc;AACA;AAOlD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAG9B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,aAAQ,GAAG,EAAE,CAAC;QAGV,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACzE,IAAI,CAAC,QAAQ,GAAU,IAAI,CAAC;QAChC,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,qBAAqB;IALjC,+DAAS,CAAC;QACP,QAAQ,EAAE,eAAe;QACzB,6NAA2C;KAC9C,CAAC;GAEW,qBAAqB,CAQjC;AARiC;;;;;;;;;;;;;;;;;;ACPgB;AAOlD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IALpC;QAMI,aAAQ,GAAG,EAAE,CAAC;IAGlB,CAAC;CAAA;AAJY,uBAAuB;IALnC,+DAAS,CAAC;QACP,QAAQ,EAAE,iBAAiB;QAC3B,iOAA6C;KAChD,CAAC;GAEW,uBAAuB,CAInC;AAJmC;;;;;;;;;;;;;;;;;;;ACRc;AACA;AAOlD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAG9B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,aAAQ,GAAG,EAAE,CAAC;QAGV,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YAC5E,IAAI,CAAC,QAAQ,GAAU,IAAI,CAAC;QAChC,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,qBAAqB;IALjC,+DAAS,CAAC;QACP,QAAQ,EAAE,eAAe;QACzB,6NAA2C;KAC9C,CAAC;GAEW,qBAAqB,CAQjC;AARiC;;;;;;;;;;;;;;;;;;ACPgB;AAOlD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IALhC;QAMI,SAAI,GAAG,EAAE,CAAC;IAGd,CAAC;CAAA;AAJY,mBAAmB;IAL/B,+DAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,yNAAyC;KAC5C,CAAC;GAEW,mBAAmB,CAI/B;AAJ+B;;;;;;;;;;;;;;;;;;;ACRkB;AACA;AAOlD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAG1B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,SAAI,GAAG,EAAE,CAAC;QAGN,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACrE,IAAI,CAAC,IAAI,GAAU,IAAI,CAAC;QAC5B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,iBAAiB;IAL7B,+DAAS,CAAC;QACP,QAAQ,EAAE,WAAW;QACrB,qNAAuC;KAC1C,CAAC;GAEW,iBAAiB,CAQ7B;AAR6B;;;;;;;;;;;;;;;;;;ACPoB;AAOlD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IALjC;QAMI,UAAK,GAAG,EAAE,CAAC;IAGf,CAAC;CAAA;AAJY,oBAAoB;IALhC,+DAAS,CAAC;QACP,QAAQ,EAAE,cAAc;QACxB,2NAA0C;KAC7C,CAAC;GAEW,oBAAoB,CAIhC;AAJgC;;;;;;;;;;;;;;;;;;;ACRiB;AACA;AAOlD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAG3B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,UAAK,GAAG,EAAE,CAAC;QAGP,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACtE,IAAI,CAAC,KAAK,GAAU,IAAI,CAAC;QAC7B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,kBAAkB;IAL9B,+DAAS,CAAC;QACP,QAAQ,EAAE,YAAY;QACtB,uNAAwC;KAC3C,CAAC;GAEW,kBAAkB,CAQ9B;AAR8B;;;;;;;;;;;;;;;;;;ACPmB;AAOlD,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IALtC;QAMI,eAAU,GAAG,EAAE,CAAC;IAGpB,CAAC;CAAA;AAJY,yBAAyB;IALrC,+DAAS,CAAC;QACP,QAAQ,EAAE,mBAAmB;QAC7B,qOAA+C;KAClD,CAAC;GAEW,yBAAyB,CAIrC;AAJqC;;;;;;;;;;;;;;;;;;;ACRY;AACA;AAOlD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAGhC,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,eAAU,GAAG,EAAE,CAAC;QAGZ,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YAC5E,IAAI,CAAC,UAAU,GAAU,IAAI,CAAC;QAClC,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,uBAAuB;IALnC,+DAAS,CAAC;QACP,QAAQ,EAAE,iBAAiB;QAC3B,iOAA6C;KAChD,CAAC;GAEW,uBAAuB,CAQnC;AARmC;;;;;;;;;;;;;;;;;;ACPc;AAOlD,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IALtC;QAMI,eAAU,GAAG,EAAE,CAAC;IAGpB,CAAC;CAAA;AAJY,yBAAyB;IALrC,+DAAS,CAAC;QACP,QAAQ,EAAE,mBAAmB;QAC7B,qOAA+C;KAClD,CAAC;GAEW,yBAAyB,CAIrC;AAJqC;;;;;;;;;;;;;;;;;;;ACRY;AACA;AAOlD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAGhC,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,eAAU,GAAG,EAAE,CAAC;QAGZ,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YAC5E,IAAI,CAAC,UAAU,GAAU,IAAI,CAAC;QAClC,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,uBAAuB;IALnC,+DAAS,CAAC;QACP,QAAQ,EAAE,iBAAiB;QAC3B,iOAA6C;KAChD,CAAC;GAEW,uBAAuB,CAQnC;AARmC;;;;;;;;;;;;;;;;;;ACPc;AAOlD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IALhC;QAMI,SAAI,GAAG,EAAE,CAAC;IAGd,CAAC;CAAA;AAJY,mBAAmB;IAL/B,+DAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,yNAAyC;KAC5C,CAAC;GAEW,mBAAmB,CAI/B;AAJ+B;;;;;;;;;;;;;;;;;;;ACRkB;AACA;AAOlD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAG1B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,SAAI,GAAG,EAAE,CAAC;QAGN,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACtE,IAAI,CAAC,IAAI,GAAU,IAAI,CAAC;QAC5B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,iBAAiB;IAL7B,+DAAS,CAAC;QACP,QAAQ,EAAE,WAAW;QACrB,qNAAuC;KAC1C,CAAC;GAEW,iBAAiB,CAQ7B;AAR6B;;;;;;;;;;;;;;;;;;ACPoB;AAOlD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IALjC;QAMI,UAAK,GAAG,EAAE,CAAC;IAGf,CAAC;CAAA;AAJY,oBAAoB;IALhC,+DAAS,CAAC;QACP,QAAQ,EAAE,cAAc;QACxB,2NAA0C;KAC7C,CAAC;GAEW,oBAAoB,CAIhC;AAJgC;;;;;;;;;;;;;;;;;;;ACRiB;AACA;AAOlD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAG3B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,UAAK,GAAG,EAAE,CAAC;QAGP,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACtE,IAAI,CAAC,KAAK,GAAU,IAAI,CAAC;QAC7B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,kBAAkB;IAL9B,+DAAS,CAAC;QACP,QAAQ,EAAE,YAAY;QACtB,uNAAwC;KAC3C,CAAC;GAEW,kBAAkB,CAQ9B;AAR8B;;;;;;;;;;;;;;;;;;ACRmB;AAQlD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IALjC;QAMI,UAAK,GAAC,EAAE,CAAC;IAIb,CAAC;CAAA;AALY,oBAAoB;IALhC,+DAAS,CAAC;QACP,QAAQ,EAAE,cAAc;QACxB,2NAA0C;KAC7C,CAAC;GAEW,oBAAoB,CAKhC;AALgC;;;;;;;;;;;;;;;;;;;ACRiB;AACA;AAOlD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAG3B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,WAAM,GAAG,EAAE,CAAC;QAGR,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACpE,IAAI,CAAC,MAAM,GAAU,IAAI,CAAC;QAC9B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,kBAAkB;IAL9B,+DAAS,CAAC;QACP,QAAQ,EAAE,YAAY;QACtB,uNAAwC;KAC3C,CAAC;GAEW,kBAAkB,CAQ9B;AAR8B;;;;;;;;;;;;;;;;;;ACPmB;AAOlD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IALhC;QAMI,SAAI,GAAG,EAAE,CAAC;IAGd,CAAC;CAAA;AAJY,mBAAmB;IAL/B,+DAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,yNAAyC;KAC5C,CAAC;GAEW,mBAAmB,CAI/B;AAJ+B;;;;;;;;;;;;;;;;;;;ACRkB;AACA;AAOlD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAG1B,YAAoB,EAAa;QAAb,OAAE,GAAF,EAAE,CAAW;QAFjC,SAAI,GAAG,EAAE,CAAC;QAGN,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;YACvE,IAAI,CAAC,IAAI,GAAU,IAAI,CAAC;QAC5B,CAAC,CAAC;IACN,CAAC;CACJ;;YAL0B,+DAAU;;AAHxB,iBAAiB;IAL7B,+DAAS,CAAC;QACP,QAAQ,EAAE,WAAW;QACrB,qNAAuC;KAC1C,CAAC;GAEW,iBAAiB,CAQ7B;AAR6B;;;;;;;;;;;;;ACR9B;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;ACfpB;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<nav class=\\\"navbar navbar-expand-sm navbar-dark bg-dark \\\">\\r\\n    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">RMS</a>\\r\\n    <button class=\\\"navbar-toggler d-lg-none\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapsibleNavId\\\" aria-controls=\\\"collapsibleNavId\\\"\\r\\n        aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n    </button>\\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"collapsibleNavId\\\">\\r\\n        <ul class=\\\"navbar-nav mr-auto mt-2 mt-lg-0\\\">\\r\\n            <li class=\\\"nav-item active\\\">\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\">Home <span class=\\\"sr-only\\\">(current)</span></a>\\r\\n            </li>\\r\\n            <li class=\\\"nav-item\\\">\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\">Link</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</nav>\\r\\n<div class=\\\"container-fluid\\\">\\r\\n    \\r\\n<!-- <state-insert></state-insert>\\r\\n \\r\\n<state-list></state-list> -->\\r\\n \\r\\n<!-- <city-list></city-list> -->\\r\\n<!-- <city-insert></city-insert>  -->\\r\\n<!-- <designation-list></designation-list> -->\\r\\n<!-- <designation-insert></designation-insert> -->\\r\\n<!-- <location-list></location-list> -->\\r\\n<!-- <location-insert></location-insert> -->\\r\\n<!-- <dining-list></dining-list>\\r\\n<dining-insert></dining-insert> -->\\r\\n<!-- <restaurant-insert></restaurant-insert>\\r\\n<restaurant-list></restaurant-list> -->\\r\\n<!-- <employee-list></employee-list> -->\\r\\n<!-- <employee-insert></employee-insert> -->\\r\\n<!-- <menu-list></menu-list> -->\\r\\n<!-- <menu-insert></menu-insert> -->\\r\\n<!-- <order-list></order-list>\\r\\n<order-inert></order-inert>\\r\\n<shift-insert></shift-insert>\\r\\n<shift-list></shift-list>\\r\\n\\r\\n<permission-list></permission-list>\\r\\n<permission-insert></permission-insert>\\r\\n<role-insert></role-insert>\\r\\n<role-list></role-list>\\r\\n<user-list></user-list>-->\\r\\n<user-insert></user-insert>\\r\\n\\r\\n\\r\\n</div>\\r\\n\"","export default \"<form> \\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label>State Name</label>\\r\\n      <select class=\\\"form-control\\\" name=\\\"stId\\\" [(ngModel)]=\\\"city.stId\\\">\\r\\n        <option *ngFor=\\\"let state of states\\\" [value]=\\\"state.stId\\\">\\r\\n            {{state.stName}}\\r\\n        </option>\\r\\n      </select>\\r\\n    </div>\\r\\n    <!--<div class=\\\"form-group\\\">\\r\\n        <label>Location Name</label>\\r\\n        <select class=\\\"form-control\\\" name=\\\"stId\\\" [(ngModel)]=\\\"city.stId\\\">\\r\\n          <option *ngFor=\\\"let state of locations\\\" [value]=\\\"locations.locid\\\">\\r\\n              {{locations.locname}}\\r\\n          </option>\\r\\n        </select>\\r\\n      </div>-->\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>City Id</label>\\r\\n        <input class=\\\"form-control\\\" name=\\\"cId\\\" [(ngModel)]=\\\"city.cId\\\">\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label>City Name</label>\\r\\n        <input class=\\\"form-control\\\" name=\\\"cName\\\" [(ngModel)]=\\\"city.cName\\\">\\r\\n    </div>\\r\\n    <button class=\\\"btn btn-success\\\">Save</button>\\r\\n    &nbsp;&nbsp;&nbsp;\\r\\n    <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n\\r\\n    \\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        City List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n                <th>Id</th>\\r\\n                <th>City Code</th>\\r\\n                <th>City Name</th>\\r\\n                <th>State Code</th>\\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let c of city\\\" >\\r\\n                <td>{{c.id}}</td>\\r\\n                <td>{{c.cId}}</td>\\r\\n                <td>{{c.cName}}</td>\\r\\n                <td>{{c.stId}}</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Designation Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"desigId\\\" [(ngModel)]=\\\"designation.desigId\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"desigName\\\" [(ngModel)]=\\\"designation.desigName\\\">\\r\\n            </div> \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Designation List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>Designations Code</th>\\r\\n                <th>Designations Name</th>\\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let d of designation\\\" >\\r\\n       \\r\\n                <td>{{d.desigId}}</td>\\r\\n                <td>{{d.desigName}}</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Dining Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"dId\\\" [(ngModel)]=\\\"dining.dId\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Members</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"capacity\\\" [(ngModel)]=\\\"dining.capacity\\\">\\r\\n            </div> \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Dining List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>Dining Code</th>\\r\\n                <th>Dining Name</th>\\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let d of dining\\\" >\\r\\n       \\r\\n                <td>{{d.dId}}</td>\\r\\n                <td>{{d.capacity}}</td>\\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Employee Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"eId\\\" [(ngModel)]=\\\"employee.eId\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Salary</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"salary\\\" [(ngModel)]=\\\"employee.salary\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Email</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"email\\\" [(ngModel)]=\\\"employee.email\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"eName\\\" [(ngModel)]=\\\"employee.eName\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Phone No</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"phno\\\" [(ngModel)]=\\\"employee.phno\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Desigination code</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"desigID\\\" [(ngModel)]=\\\"employee.desigID\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Restaurent Code</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"rId\\\" [(ngModel)]=\\\"employee.rId\\\">\\r\\n            </div> \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Employee List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>Employee Code</th>\\r\\n                <th>Employee Salary</th>\\r\\n                <th>Employee Email</th>\\r\\n                <th>Employee Name</th>\\r\\n                <th>Employee PhoneNo</th>\\r\\n                <th>Desigination code</th>\\r\\n                <th>Restaurent Code</th>\\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let e of employee\\\" >\\r\\n       \\r\\n                <td>{{e.eId}}</td>\\r\\n                <td>{{e.salary}}</td>\\r\\n                <td>{{e.email}}</td>\\r\\n                <td>{{e.eName}}</td>\\r\\n                <td>{{e.phno}}</td>\\r\\n                <td>{{e.desigID}}</td>\\r\\n                <td>{{e.rId}}</td>\\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Location Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"locid\\\" [(ngModel)]=\\\"location.locid\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Location Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"locname\\\" [(ngModel)]=\\\"location.locname\\\">\\r\\n            </div> \\r\\n             <div class=\\\"form-group\\\">\\r\\n                <label>City Code</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"cid\\\" [(ngModel)]=\\\"location.cid\\\">\\r\\n            </div> \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Location List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>Locations Code</th>\\r\\n                <th>Locations Name</th>\\r\\n                <th>City Code</th>\\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let l of Location\\\" >\\r\\n       \\r\\n                <td>{{l.locid}}</td>\\r\\n                <td>{{l.locname}}</td>\\r\\n                <td>{{l.cid}}</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Employee Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"manuId\\\" [(ngModel)]=\\\"employee.manuId\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Items</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"items\\\" [(ngModel)]=\\\"employee.items\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>FullPrice</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"fullPrice\\\" [(ngModel)]=\\\"employee.fullPrice\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>HalfPrice</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"halfPrice\\\" [(ngModel)]=\\\"employee.halfPrice\\\">\\r\\n            </div> \\r\\n          \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Menu List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>Menu Code</th>\\r\\n                <th>Items</th>\\r\\n                <th>FullPrice</th>\\r\\n                <th>HalfPrice</th>\\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let e of menu\\\" >\\r\\n       \\r\\n                <td>{{e.manuId}}</td>\\r\\n                <td>{{e.items}}</td>\\r\\n                <td>{{e.fullPrice}}</td>\\r\\n                <td>{{e.halfPrice}}</td>\\r\\n                \\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Order Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"orderNo\\\" [(ngModel)]=\\\"employee.orderNo\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Table no</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"tableNo\\\" [(ngModel)]=\\\"employee.tableNo\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Devilary Time</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"DlTime\\\" [(ngModel)]=\\\"employee.DlTime\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>MenuId</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"menuId\\\" [(ngModel)]=\\\"employee.menuId\\\">\\r\\n            </div> \\r\\n             \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n       Order List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>Order Code</th>\\r\\n                <th>Table no</th>\\r\\n                <th>Devilary Time</th>\\r\\n                <th>Menu Id</th>\\r\\n               \\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let e of order\\\" >\\r\\n       \\r\\n                <td>{{e.orderNo}}</td>\\r\\n                <td>{{e.tableNo}}</td>\\r\\n                <td>{{e.DlTime}}</td>\\r\\n                <td>{{e.menuId}}</td>\\r\\n               \\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Permission Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Permission Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"permissionid\\\" [(ngModel)]=\\\"permission.permissionid\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"permissionName\\\" [(ngModel)]=\\\"permission.permissionName\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Description</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"permissiondiscription\\\" [(ngModel)]=\\\"permission.permissiondiscription\\\">\\r\\n            </div> \\r\\n          \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Permission List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>permission Code</th>\\r\\n                <th>Name</th>\\r\\n                <th>Description</th>\\r\\n               \\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let e of permission\\\" >\\r\\n       \\r\\n                <td>{{e.permissionid}}</td>\\r\\n                <td>{{e.permissionName}}</td>\\r\\n                <td>{{e.permissiondiscription}}</td>\\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Restaurant Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"rId\\\" [(ngModel)]=\\\"restaurant.rId\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>PhoneNo</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"phno\\\" [(ngModel)]=\\\"restaurant.phno\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Email</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"email\\\" [(ngModel)]=\\\"restaurant.email\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Email Code</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"locid\\\" [(ngModel)]=\\\"restaurant.locid\\\">\\r\\n            </div> \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Restaurant List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>Restaurant Code</th>\\r\\n                <th>Restaurant PhoneNo</th>\\r\\n                <th>Restaurant Email</th>\\r\\n                <th>Location Code</th>\\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let r of restaurant\\\" >\\r\\n       \\r\\n                <td>{{r.rId}}</td>\\r\\n                <td>{{r.phno}}</td>\\r\\n                <td>{{r.email}}</td>\\r\\n                <td>{{r.locid}}</td>\\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Role Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>role Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"roleid\\\" [(ngModel)]=\\\"role.roleid\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"roleName\\\" [(ngModel)]=\\\"role.roleName\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Description</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"roleDis\\\" [(ngModel)]=\\\"role.roleDis\\\">\\r\\n            </div> \\r\\n          \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        Role List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>role Code</th>\\r\\n                <th>Name</th>\\r\\n                <th>Description</th>\\r\\n               \\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let e of role\\\" >\\r\\n       \\r\\n                <td>{{e.roleid}}</td>\\r\\n                <td>{{e.roleName}}</td>\\r\\n                <td>{{e.roleDis}}</td>\\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            Shift Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>order Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"eId\\\" [(ngModel)]=\\\"shift.eId\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Sift Type</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"sType\\\" [(ngModel)]=\\\"shift.sType\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Date</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"date\\\" [(ngModel)]=\\\"shift.date\\\">\\r\\n            </div> \\r\\n          \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n       Shift List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>order Code</th>\\r\\n                <th>Sift Type</th>\\r\\n                <th>Date</th>\\r\\n               \\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let e of shift\\\" >\\r\\n       \\r\\n                <td>{{e.eId}}</td>\\r\\n                <td>{{e.sType}}</td>\\r\\n                <td>{{e.date}}</td>\\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            State Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"stId\\\" [(ngModel)]=\\\"state.stId\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"stName\\\" [(ngModel)]=\\\"state.stName\\\">\\r\\n            </div> \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<table class=\\\"table table-hover\\\">\\r\\n        <tr>\\r\\n            <th>Id</th>\\r\\n            <th>Short Code</th>\\r\\n            <th>State Name</th>\\r\\n        </tr>\\r\\n        <tr *ngFor = \\\"let s of states\\\" >\\r\\n            <td>{{s.id}}</td>\\r\\n            <td>{{s.stId}}</td>\\r\\n            <td>{{s.stName}}</td>\\r\\n        </tr>\\r\\n    </table>\"","export default \"<form>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header bg-primary text-light\\\">\\r\\n            User Insert Form  \\r\\n        </div>\\r\\n        <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>user Id</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"id\\\" [(ngModel)]=\\\"user.id\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"userName\\\" [(ngModel)]=\\\"user.userName\\\">\\r\\n            </div> \\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Email</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"emailId\\\" [(ngModel)]=\\\"user.emailId\\\">\\r\\n            </div>  \\r\\n             <div class=\\\"form-group\\\">\\r\\n                <label>Password</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"user.password\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Phone Number</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"phoneNumber\\\" [(ngModel)]=\\\"user.phoneNumber\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>First Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" [(ngModel)]=\\\"user.firstName\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Last Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" [(ngModel)]=\\\"user.lastName\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Address1</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"address1\\\" [(ngModel)]=\\\"user.address1\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Address2</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"address2\\\" [(ngModel)]=\\\"user.address2\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>country</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"country\\\" [(ngModel)]=\\\"user.country\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>State</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"state\\\" [(ngModel)]=\\\"user.state\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Zip</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"zip\\\" [(ngModel)]=\\\"user.zip\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Join Date</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"creation\\\" [(ngModel)]=\\\"user.creation\\\">\\r\\n            </div> \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Role</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"role\\\" [(ngModel)]=\\\"user.role\\\">\\r\\n            </div> \\r\\n           \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Image</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"avatar\\\" [(ngModel)]=\\\"user.avatar\\\">\\r\\n            </div> \\r\\n          \\r\\n            \\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n            <button class=\\\"btn btn-success\\\">Save</button>\\r\\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n            <button class=\\\"btn btn-danger\\\">Cancel</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header bg-primary text-light\\\">\\r\\n        User List\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table class=\\\"table table-hover\\\">\\r\\n            <tr>\\r\\n            \\r\\n                <th>User Code</th>\\r\\n                <th>Name</th>\\r\\n                <th>Email</th>\\r\\n                 <th>Password</th>\\r\\n                <th>Phone Number</th>\\r\\n                <th>First Name</th>\\r\\n                 <th>Last Name</th>\\r\\n                <th>Address1</th>\\r\\n                <th>Address2</th>\\r\\n                 <th>Country</th>\\r\\n                <th>State</th>\\r\\n                <th>Zip</th>\\r\\n                 <th>Role</th>\\r\\n                <th>Image</th>\\r\\n                \\r\\n               \\r\\n           \\r\\n            </tr>\\r\\n            <tr *ngFor = \\\"let u of user\\\" >\\r\\n       \\r\\n                <td>{{u.id}}</td>\\r\\n                <td>{{u.userName}}</td>\\r\\n                <td>{{u.emailId}}</td>\\r\\n                 <td>{{u.password}}</td>\\r\\n                <td>{{u.phoneNumber}}</td>\\r\\n                <td>{{u.firstName}}</td>\\r\\n                 <td>{{u.lastName}}</td> \\r\\n                <td>{{u.address1}}</td>\\r\\n                <td>{{u.address2}}</td>\\r\\n                 <td>{{u.country}}</td>\\r\\n                <td>{{u.state}}</td>\\r\\n\\r\\n\\r\\n                <td>{{u.zip}}</td>\\r\\n                 <td>{{u.creation}}</td>\\r\\n                <td>{{u.role}}</td>\\r\\n                <td>{{u.avatar}}</td>\\r\\n                \\r\\n            </tr>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: 'app.component.html'\r\n})\r\n\r\nexport class AppComponent{\r\n    \r\n}","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { AppComponent } from './app.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { StateListComponent } from './state-list.component';\r\nimport { StateInsertComponent } from './state-insert.component';\r\nimport { CityListComponent } from './city-list.component';\r\nimport {CityInsertComponent}from './city-insert.component';\r\nimport{DesignationListComponent}from './designation-list.component';\r\nimport{DesignationInsertComponent}from './designation-insert.component';\r\nimport{LocationListComponent}from './location-list.component';\r\nimport{LocationInsertComponent}from './location-insert.component';\r\nimport{DiningListComponent}from './dinings-list.component';\r\nimport{DiningInsertComponent}from './dinings-insert.component';\r\nimport{RestaurantInsertComponent}from './restaurant-insert.component';\r\nimport{RestaurantListComponent}from './restaurant-list.component';\r\n\r\nimport{EmployeeListComponent}from './employee-list.component';\r\nimport{EmployeeInsertComponent}from './employee-insert.component';\r\nimport{MenuListComponent}from './menu-list.component';\r\nimport{MenuInsertComponent}from './menu-insert.component';\r\nimport{OrderListComponent}from './order-list.component';\r\nimport{OrderInsertComponent}from './order-insert.component';\r\nimport{ShiftListComponent}from './shift-list.component';\r\nimport{ShiftInsertComponent}from './shift-insert.component';\r\n\r\nimport{PermissionListComponent}from './permission-list.component';\r\nimport{PermissionInsertComponent}from './permission-insert.component';\r\nimport{RoleListComponent}from './role-list.component';\r\nimport{RoleInsertComponent}from './role-insert.component';\r\nimport{UserListComponent}from './user-list.component';\r\nimport{UserInsertComponent}from './user-insert.component';\r\n\r\n\r\n\r\n@NgModule({\r\n    imports: [BrowserModule,HttpClientModule,FormsModule],\r\n    declarations: [AppComponent,StateListComponent,StateInsertComponent,CityInsertComponent,CityListComponent,DesignationListComponent,DesignationInsertComponent,\r\n        LocationInsertComponent,LocationListComponent,DiningInsertComponent,DiningListComponent,\r\n        RestaurantListComponent,RestaurantInsertComponent,EmployeeInsertComponent,EmployeeListComponent,\r\n        MenuInsertComponent,MenuListComponent,OrderInsertComponent,OrderListComponent,ShiftInsertComponent,\r\n        ShiftListComponent,PermissionInsertComponent,PermissionListComponent,RoleInsertComponent,RoleListComponent,\r\n        UserListComponent,UserInsertComponent\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'city-insert',\r\n    templateUrl: 'city-insert.component.html'\r\n})\r\n\r\nexport class CityInsertComponent{\r\n    city = {};\r\n    states = [];\r\n    locations = [];\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/States/getAllState\").subscribe((data)=>{\r\n            this.states = <any[]>data;\r\n        /*  this.hc.get(\"http://localhost:8090/Locations/getAllLocation\").subscribe((data)=>{\r\n            this.locations = <any[]>data;  */\r\n        });\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'city-list',\r\n    templateUrl: 'city-list.component.html'\r\n})\r\n\r\nexport class CityListComponent{\r\n    city = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/City/getAllcity\").subscribe((data)=>{\r\n            this.city = <any[]>data;\r\n        })\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'designation-insert',\r\n    templateUrl: 'designation-insert.component.html'\r\n})\r\n\r\nexport class DesignationInsertComponent{\r\n    designation = {};\r\n\r\n    \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'designation-list',\r\n    templateUrl: 'designation-list.component.html'\r\n})\r\n\r\nexport class DesignationListComponent{\r\n    designation = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Designations/getAllRecord\").subscribe((data)=>{\r\n            this.designation = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dining-insert',\r\n    templateUrl: 'dinings-insert.component.html'\r\n})\r\n\r\nexport class DiningInsertComponent{\r\n    dining = {};\r\n\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dining-list',\r\n    templateUrl: 'dinings-list.component.html'\r\n})\r\n\r\nexport class DiningListComponent{\r\n    dining = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Dinings/getAllRecord\").subscribe((data)=>{\r\n            this.dining = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'employee-insert',\r\n    templateUrl: 'employee-insert.component.html'\r\n})\r\n\r\nexport class EmployeeInsertComponent{\r\n    employee = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'employee-list',\r\n    templateUrl: 'employee-list.component.html'\r\n})\r\n\r\nexport class EmployeeListComponent{\r\n    employee = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Employee/getAllRecord\").subscribe((data)=>{\r\n            this.employee = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'location-insert',\r\n    templateUrl: 'location-insert.component.html'\r\n})\r\n\r\nexport class LocationInsertComponent{\r\n    location = {};\r\n\r\n    \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'location-list',\r\n    templateUrl: 'location-list.component.html'\r\n})\r\n\r\nexport class LocationListComponent{\r\n    Location = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Locations/getAllLocation\").subscribe((data)=>{\r\n            this.Location = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'menu-insert',\r\n    templateUrl: 'menu-insert.component.html'\r\n})\r\n\r\nexport class MenuInsertComponent{\r\n    menu = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'menu-list',\r\n    templateUrl: 'menu-list.component.html'\r\n})\r\n\r\nexport class MenuListComponent{\r\n    menu = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Menu/getAllRecord\").subscribe((data)=>{\r\n            this.menu = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'order-insert',\r\n    templateUrl: 'order-insert.component.html'\r\n})\r\n\r\nexport class OrderInsertComponent{\r\n    order = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'order-list',\r\n    templateUrl: 'order-list.component.html'\r\n})\r\n\r\nexport class OrderListComponent{\r\n    order = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Order/getAllRecord\").subscribe((data)=>{\r\n            this.order = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'permission-insert',\r\n    templateUrl: 'permission-insert.component.html'\r\n})\r\n\r\nexport class PermissionInsertComponent{\r\n    permission = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'permission-list',\r\n    templateUrl: 'permission-list.component.html'\r\n})\r\n\r\nexport class PermissionListComponent{\r\n    permission = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/permission/accessingData\").subscribe((data)=>{\r\n            this.permission = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'restaurant-insert',\r\n    templateUrl: 'restaurant-insert.component.html'\r\n})\r\n\r\nexport class RestaurantInsertComponent{\r\n    restaurant = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'restaurant-list',\r\n    templateUrl: 'restaurant-list.component.html'\r\n})\r\n\r\nexport class RestaurantListComponent{\r\n    restaurant = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Restaurants/getAllRecord\").subscribe((data)=>{\r\n            this.restaurant = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'role-insert',\r\n    templateUrl: 'role-insert.component.html'\r\n})\r\n\r\nexport class RoleInsertComponent{\r\n    role = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'role-list',\r\n    templateUrl: 'role-list.component.html'\r\n})\r\n\r\nexport class RoleListComponent{\r\n    role = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/role/accessingData\").subscribe((data)=>{\r\n            this.role = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'shift-insert',\r\n    templateUrl: 'shift-insert.component.html'\r\n})\r\n\r\nexport class ShiftInsertComponent{\r\n    shift = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'shift-list',\r\n    templateUrl: 'shift-list.component.html'\r\n})\r\n\r\nexport class ShiftListComponent{\r\n    shift = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/Shift/getAllRecord\").subscribe((data)=>{\r\n            this.shift = <any[]>data;\r\n        })\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'state-insert',\r\n    templateUrl: 'state-insert.component.html'\r\n})\r\n\r\nexport class StateInsertComponent  {\r\n    state={};\r\n   \r\n\r\n    \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'state-list',\r\n    templateUrl: 'state-list.component.html'\r\n})\r\n\r\nexport class StateListComponent{\r\n    states = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http:localhost:8090/States/getAllState\").subscribe((data)=>{\r\n            this.states = <any[]>data;\r\n        })\r\n    }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'user-insert',\r\n    templateUrl: 'user-insert.component.html'\r\n})\r\n\r\nexport class UserInsertComponent{\r\n    user = {};\r\n\r\n   \r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'user-list',\r\n    templateUrl: 'user-list.component.html'\r\n})\r\n\r\nexport class UserListComponent{\r\n    user = [];\r\n\r\n    constructor(private hc:HttpClient){\r\n        this.hc.get(\"http://localhost:8090/users/accessingData\").subscribe((data)=>{\r\n            this.user = <any[]>data;\r\n        })\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}